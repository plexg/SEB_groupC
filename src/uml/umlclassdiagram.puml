@startuml
abstract class Room {
    +showIntroduction() : void
    +presentChallenge() : void
    +checkAnswer() : boolean
    +giveFeedback() : void
    +triggerMonster() : void
}

class StartRoom {
    -player : Player
    +showIntroduction() : void
    +presentChallenge() : void
    +checkAnswer() : boolean
    +giveFeedback() : void
    +triggerMonster() : void
}

class DailyScrumRoom {
    -player : Player
    -database : Database
    -enter : String
    -input : Scanner
    +showIntroduction() : void
    +presentChallenge() : void
    +checkAnswer() : boolean
    +giveFeedback() : void
    +triggerMonster() : void
}

class SprintReviewRoom {
    -feedbackItems : List<String>
    -userInput : String
    -player : Player
    -database : Database
    -challenge : ChallengeStrategy
    -enter : String
    -input : Scanner
    +showIntroduction() : void
    +presentChallenge() : void
    +checkAnswer() : boolean
    +giveFeedback() : void
    +triggerMonster() : void
}

class SprintRetrospectiveRoom {
    -enter : String
    -input : Scanner
    -database : Database
    -player : Player
    +showIntroduction() : void
    +presentChallenge() : void
    +checkAnswer() : boolean
    +giveFeedback() : void
    +triggerMonster() : void
}

class Player {
    -name : String
    -room : Room
    +getName() : String
    +setRoom(room : Room) : void
    +getRoom() : Room
    +getStatus() : String
}

class Database {
    +updateRoomCompletion(playerName : String, roomKey : String, completed : boolean) : void
    +isRoomCompleted(playerName : String, roomKey : String) : boolean
}

interface ChallengeStrategy {
    +present() : void
    +check(input : String) : boolean
}

Room <|-- StartRoom
Room <|-- DailyScrumRoom
Room <|-- SprintReviewRoom
Room <|-- SprintRetrospectiveRoom
SprintReviewRoom o-- ChallengeStrategy
DailyScrumRoom o-- Database
SprintReviewRoom o-- Database
SprintRetrospectiveRoom o-- Database
DailyScrumRoom o-- Player
SprintReviewRoom o-- Player
SprintRetrospectiveRoom o-- Player
StartRoom o-- Player
@enduml